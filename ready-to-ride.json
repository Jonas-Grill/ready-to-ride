{
  "openapi": "3.0.3",
  "info": {
    "version": "0.0.1",
    "title": "Ready to Ride",
    "description": "An API to manage the Ready to Ride stable."
  },
  "servers": [
    {
      "url": "https://ready-to-ride-backend.tk"
    }
  ],
  "paths": {
    "/horses": {
      "get": {
        "description": "Returns all horses from the system that the user has access to.\n",
        "operationId": "findHorses",
        "tags": [
          "Horses"
        ],
        "responses": {
          "200": {
            "description": "Horse list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HorseModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new horse. Duplicates are allowed",
        "operationId": "addHorse",
        "tags": [
          "Horses"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "Horse to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HorseModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "horse response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HorseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/horses/{id}": {
      "get": {
        "description": "Returns a horse based on a single ID, if the user has access to the horse",
        "operationId": "find horse by id",
        "tags": [
          "Horses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of horse to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "horse response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedHorseModel"
                }
              }
            }
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a horse based on a single ID and the provided Data, if the user has access to the horse. Only provide the data you want to update",
        "operationId": "update horse by id",
        "tags": [
          "Horses"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of horse to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "requestBody": {
          "description": "Updated horse data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedHorseModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "horse response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedHorseModel"
                }
              }
            }
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "deletes a single horse based on the ID supplied",
        "operationId": "deleteHorse",
        "tags": [
          "Horses"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of horse to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "horse deleted"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/horses/races": {
      "get": {
        "description": "Returns all horse races from the system.",
        "operationId": "findHorseRaces",
        "tags": [
          "Horses"
        ],
        "responses": {
          "200": {
            "description": "Horse race list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Quarterhorse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/horses/colours": {
      "get": {
        "description": "Returns all horse colours from the system.",
        "operationId": "findHorseColours",
        "tags": [
          "Horses"
        ],
        "responses": {
          "200": {
            "description": "Horse colour list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Read Roan"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/horses/levels": {
      "get": {
        "description": "Returns all horse difficulty levels from the system.",
        "operationId": "findHorseLevels",
        "tags": [
          "Horses"
        ],
        "responses": {
          "200": {
            "description": "Horse level list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Anf√§nger"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ridinglessons": {
      "get": {
        "description": "Returns all riding lessons for one week. Deafult is the current week.\n",
        "operationId": "findRidingLessons",
        "tags": [
          "Riding Lesson"
        ],
        "parameters": [
          {
            "name": "trainer",
            "in": "query",
            "description": "ID of trainer of riding lesson to fetch",
            "required": false,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          },
          {
            "name": "horses",
            "in": "query",
            "description": "IDs of horses of riding lessons to fetch. Comma separated. Only works in combination with bookedLessons or getPossibleHorseCombinations.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": "611d5cd230dd29fc60df7b94, 611d5cd230dd29fc60df7b95, 611d5cd230dd29fc60df7b96"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date from which riding lesson should be fetched. If no toDate is defined the system will return the lessons for one week.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2015-10-26"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date to which riding lesson should be fetched. If no fromDate is defined the system will return the lessons for one week.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2015-10-28"
            }
          },
          {
            "name": "getPossibleHorseCombinations",
            "in": "query",
            "description": "Specifies whether the system should return training lessons with possible horse combinations. If set to true the system will only return unbooked lessons.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "bookedLessons",
            "in": "query",
            "description": "Specifies whether the system should return booked or unbooked lessons. If set to false the system will only return unbooked lessons. If set to true the system will only return booked lessons. If not set the system will return all lessons.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Riding lessons list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedRidingLessonModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a single new riding lesson. Duplicates are allowed",
        "operationId": "addRidingLesson",
        "tags": [
          "Riding Lesson"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "Riding Lesson to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseRidingLessonModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "lesson response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseRidingLessonModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "please login to access this function.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ridinglessons/multiple": {
      "post": {
        "description": "Creates a single new riding lesson. Duplicates are allowed",
        "operationId": "addRidingLesson",
        "tags": [
          "Riding Lesson"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "Riding Lesson to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMultipleRidingLessonModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "lesson response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseRidingLessonModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "please login to access this function.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ridinglessons/{id}": {
      "delete": {
        "description": "Cancels a riding lesson",
        "operationId": "deleteRidingLesson",
        "tags": [
          "Riding Lesson"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of riding lesson to cancel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "riding lesson cancellation accepted"
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ridinglessons/{id}/book": {
      "post": {
        "description": "Accepts a booking request",
        "operationId": "acceptBooking",
        "tags": [
          "Riding Lesson"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of riding lessin",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "horseId": {
                    "type": "string",
                    "example": "urfnf87387fjv87rv7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "booking accepted"
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of users with the trainer role. The access on other users is restricted.",
        "operationId": "findUsers",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "user response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainerModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user. Duplicates are allowed. Three different schemas based on the user role.",
        "operationId": "registerUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "description": "User to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedUserModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "horse response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates the authorized user based on the provided Data. Only provide the data you want to update",
        "operationId": "updateUser",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "Updated user data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedUserModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserModel"
                }
              }
            }
          },
          "400": {
            "description": "bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Returns a user based on a single ID, if the user has access to the user",
        "operationId": "find user by id",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/calender": {
      "get": {
        "description": "Get all bookings from the user with the specified id.",
        "operationId": "find booking by user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "611d5cd230dd29fc60df7b94"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "booking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedRidingLessonModel"
                }
              }
            }
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/roles": {
      "get": {
        "description": "Returns all user roles from the system.",
        "operationId": "findUserRoles",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User roles list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Trainer"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/focuses": {
      "get": {
        "description": "Returns all trainer focuses from the system.",
        "operationId": "findUserFocuses",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User focuses list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Kinder"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/proficiencies": {
      "get": {
        "description": "Returns all user proficiencies from the system.",
        "operationId": "findUserProficiencies",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User proficiencies list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Turnierreiter"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "description": "Returns the currently authenticated user.",
        "operationId": "find user by email",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "description": "Authenticate using the credentials of an existing user.",
        "operationId": "loginUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "description": "Credentials of user to authenticate",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "horst.m√ºller@pferde-liebhaber.de"
                  },
                  "password": {
                    "type": "string",
                    "example": "e4wrgergverg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "token response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "gerpoimjkvmnoyidmkjv0ifrkvigerkigeorakjv98jdfbmpdskmoi"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user with these credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stable": {
      "get": {
        "description": "Returns all stable infos from the system that the user has access to.\n",
        "operationId": "findStable",
        "tags": [
          "Stable"
        ],
        "responses": {
          "200": {
            "description": "Stable response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StableModel"
                    },
                    {
                      "$ref": "#/components/schemas/ExtendedStableModel"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates stable data.\n",
        "operationId": "updateStable",
        "tags": [
          "Stable"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "Data to Update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedStableModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stable response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedStableModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stable/arena/{name}/calender": {
      "get": {
        "description": "Get all bookings from the arena with the specified name.",
        "operationId": "find booking by arena",
        "tags": [
          "Stable"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of arena to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Arena 1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "booking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedRidingLessonModel"
                }
              }
            }
          },
          "404": {
            "description": "not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "description": "Returns all News from the system that are addressed to the user.\n",
        "operationId": "findNews",
        "tags": [
          "News"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page of result",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "News list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/News"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Post a new news. Duplicates are allowed",
        "operationId": "addNews",
        "tags": [
          "News"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "News to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/News"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "news response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News"
                }
              }
            }
          },
          "400": {
            "description": "Bad request/Wrong data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWTAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Example: \n> Authorization: Bearer <token>",
        "x-last-modified": 1652697126238
      }
    },
    "schemas": {
      "ExtendedHorseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HorseModel"
          },
          {
            "type": "object",
            "required": [
              "description"
            ],
            "properties": {
              "description": {
                "type": "string",
                "example": "Das ist ein tolles Pferd."
              },
              "pictures": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "611d5cd230dd29fc60df7b94"
                }
              }
            }
          }
        ]
      },
      "HorseModel": {
        "type": "object",
        "required": [
          "name",
          "height",
          "age",
          "colour",
          "race",
          "difficulty_level"
        ],
        "properties": {
          "_id": {
            "uniqueItems": false,
            "type": "string",
            "readOnly": true,
            "example": "611d5cd230dd29fc60df7b94"
          },
          "name": {
            "type": "string",
            "example": "Winny"
          },
          "height": {
            "type": "number",
            "minimum": 0,
            "example": 145
          },
          "race": {
            "type": "string",
            "enum": [
              "Quarterhorse",
              "Deutsches Reitpony",
              "Friesenpferde",
              "Haflinger",
              "Hannoveraner",
              "Holsteiner Pferde",
              "Islandpferde",
              "Oldenburger",
              "Pura Raza Espanola"
            ],
            "example": "Pura Raza Espanola"
          },
          "age": {
            "type": "number",
            "minimum": 0,
            "example": 8
          },
          "colour": {
            "type": "string",
            "enum": [
              "Red Roan",
              "Blue Roan",
              "Rappe",
              "Fuchs",
              "Palomino",
              "Braun",
              "Schimmel",
              "Schecke"
            ],
            "example": "Blue Roan"
          },
          "difficultyLevel": {
            "type": "string",
            "enum": [
              "Anf√§nger",
              "Amateur",
              "Fortgeschritten",
              "Profi"
            ]
          },
          "profilePicture": {
            "type": "string",
            "example": "611d5cd230dd29fc60df7b94"
          }
        }
      },
      "BaseUserModel": {
        "type": "object",
        "required": [
          "email",
          "name",
          "age",
          "role",
          "password"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "readOnly": true,
            "example": "611d5cd230dd29fc60df7b94"
          },
          "email": {
            "type": "string",
            "example": "horst.m√ºller@pferde-liebhaber.de"
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "example": "fwrvwrvfdsv"
          },
          "name": {
            "type": "object",
            "required": [
              "firstName",
              "lastName"
            ],
            "properties": {
              "firstName": {
                "type": "string",
                "example": "Horst"
              },
              "lastName": {
                "type": "string",
                "example": "M√ºller"
              }
            }
          },
          "age": {
            "type": "number",
            "example": 40
          },
          "role": {
            "type": "string",
            "writeOnly": true,
            "enum": [
              "user",
              "trainer",
              "admin"
            ]
          }
        }
      },
      "TrainerModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseUserModel"
          },
          {
            "type": "object",
            "required": [
              "focus"
            ],
            "properties": {
              "focus": {
                "type": "string",
                "enum": [
                  "Kinder",
                  "Erwachsene",
                  "Turnierreiter",
                  "Anf√§nger",
                  "Fortgeschrittene"
                ]
              },
              "profilePicture": {
                "type": "string",
                "example": "611d5cd230dd29fc60df7b94"
              }
            }
          }
        ]
      },
      "ExtendedTrainerModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseUserModel"
          },
          {
            "$ref": "#/components/schemas/TrainerModel"
          },
          {
            "type": "object",
            "required": [
              "description",
              "rolePasscode"
            ],
            "properties": {
              "description": {
                "type": "string",
                "example": "Das ist ein toller Trainer."
              },
              "achievements": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "year": {
                      "type": "number",
                      "example": 2012
                    },
                    "name": {
                      "type": "string",
                      "example": "Deutscher Meister Senior Reining"
                    }
                  }
                }
              },
              "certificates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "year": {
                      "type": "number",
                      "example": 2012
                    },
                    "name": {
                      "type": "string",
                      "example": "Pferdewirtschaftsmeister"
                    }
                  }
                }
              },
              "pictures": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "611d5cd230dd29fc60df7b94"
                }
              },
              "rolePasscode": {
                "type": "string",
                "writeOnly": true,
                "example": "vjvuivrgesdgs"
              }
            }
          }
        ]
      },
      "UserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseUserModel"
          },
          {
            "type": "object",
            "required": [
              "weight",
              "height",
              "proficiency"
            ],
            "properties": {
              "weight": {
                "type": "number",
                "minimum": 0,
                "example": "80"
              },
              "height": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "example": "180"
              },
              "proficiency": {
                "type": "string",
                "enum": [
                  "Turnierreiter",
                  "Anf√§nger",
                  "Fortgeschrittener"
                ]
              }
            }
          }
        ]
      },
      "AdminModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseUserModel"
          },
          {
            "type": "object",
            "required": [
              "rolePasscode"
            ],
            "properties": {
              "rolePasscode": {
                "writeOnly": true,
                "type": "string",
                "example": "4hz879erah"
              }
            }
          }
        ]
      },
      "ExtendedUserModel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserModel"
          },
          {
            "$ref": "#/components/schemas/AdminModel"
          },
          {
            "$ref": "#/components/schemas/ExtendedTrainerModel"
          }
        ],
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "user:": "#/components/schemas/UserModel",
            "trainer": "#/components/schemas/TrainerModel",
            "admin": "#/components/schemas/AdminModel"
          }
        }
      },
      "StableModel": {
        "type": "object",
        "required": [
          "name",
          "description",
          "arenas",
          "boxes"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "readOnly": true,
            "example": "611d5cd230dd29fc60df7b94"
          },
          "name": {
            "type": "string",
            "example": "Ready to Ride"
          },
          "description": {
            "type": "string",
            "example": "Dies ein toller Stall des."
          },
          "arenas": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "size"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Halle 1"
                },
                "size": {
                  "type": "number",
                  "minimum": 0,
                  "example": 100
                }
              }
            }
          },
          "boxes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "price",
                "size",
                "count"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Deluxe Box"
                },
                "price": {
                  "type": "number",
                  "example": 700
                },
                "size": {
                  "type": "number",
                  "example": 5.5
                },
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5
                }
              }
            }
          }
        }
      },
      "ExtendedStableModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StableModel"
          },
          {
            "type": "object",
            "required": [
              "adminPasscode",
              "trainerPasscode"
            ],
            "properties": {
              "adminPasscode": {
                "type": "string"
              },
              "trainerPasscode": {
                "type": "string"
              }
            }
          }
        ]
      },
      "News": {
        "type": "object",
        "required": [
          "caption",
          "text",
          "addressees"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "readOnly": true,
            "example": "611d5cd230dd29fc60df7b94"
          },
          "caption": {
            "type": "string",
            "example": "Pferd hat krassen kram geschafft"
          },
          "text": {
            "type": "string",
            "example": "Pferd das krass sein tut hat auf krassem Tunier gewonnen mit dem Trainer xyz."
          },
          "addressees": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Role of addressees",
                  "enum": [
                    "user",
                    "trainer",
                    "admin"
                  ]
                },
                {
                  "type": "string",
                  "description": "E-Mail of addressee",
                  "example": "horst.m√ºller@pferde-liebhaber.de"
                }
              ]
            }
          }
        }
      },
      "BaseRidingLessonModel": {
        "type": "object",
        "required": [
          "arena",
          "day",
          "startHour"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "readOnly": true,
            "example": "611d5cd230dd29fc60df7b94"
          },
          "trainer": {
            "type": "string",
            "readOnly": true,
            "example": "Horst M√ºller"
          },
          "booked": {
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "arena": {
            "type": "string",
            "example": "Halle 1"
          },
          "day": {
            "type": "string",
            "format": "date",
            "example": "2015-10-26"
          },
          "startHour": {
            "type": "integer",
            "minimum": 0,
            "maximum": 24
          }
        }
      },
      "CreateMultipleRidingLessonModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRidingLessonModel"
          },
          {
            "type": "object",
            "required": [
              "endHour"
            ],
            "properties": {
              "endHour": {
                "type": "integer",
                "minimum": 0,
                "maximum": 24
              }
            }
          }
        ]
      },
      "ExtendedRidingLessonModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRidingLessonModel"
          },
          {
            "type": "object",
            "required": [
              "horse"
            ],
            "properties": {
              "horse": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Silva"
                  },
                  "id": {
                    "type": "string",
                    "example": "vnijniomvmi48483jffjc87"
                  }
                }
              }
            }
          }
        ]
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
